from pytube import Channel
from pytube import Playlist

class FindVideoByKeywords:
    def __init__(self,link:str):
        try:
            self.videos_container = Channel(link)
        except:
            self.videos_container = Playlist(link)
        self.keywords = []
        self.videos_with_captions = {}
        self.last_analizys = []
    
    def set_keywords(self,keywords:list) -> list:
        """Set keywords

        :param keywords:
            list of strings representing keywords.
        :type keywords: list
        :returns: 
            list containing all keywords
        """
        self.keywords.extend(keywords)
        return self.keywords

    def clean_keywords(self):
        """Remove all keywords"""
        self.keywords = []

    def get_captions(self):
        """Get transcript of all videos"""
        for video in self.videos_container.videos[:50]:
            try:
                caption = video.captions["a.pt"].generate_list_captions() #autogenerated portuguese
                self.videos_with_captions[video.title] = caption
            except Exception as e:
                print(f"ERROR --->: {video.title}")
                continue

        return self.videos_with_captions
    
    def analyze(self):
        """
        Analyzes the transcripts obtained and gives them a score.
        Each keyword is worth 10 points and with each occurrence your score drops by half.

        """
        rated_videos = []
        for title,caption in self.videos_with_captions.items():
            video_rated = {"title" : title, "points" : 0, "ocurrences" : []}
            keyword_value = {x:10 for x in self.keywords}
            for track in caption:
                for word in self.keywords:
                    if word in track["text"]:
                        video_rated["points"] += keyword_value[word]
                        keyword_value[word] /= 2
                        video_rated["ocurrences"].append(
                            f"{track['start']} --> {track['end']} {track['text']}"
                        )
            rated_videos.append(video_rated)
            rated_videos.sort(key=lambda x:x["points"],reverse=True)
        self.last_analizys = rated_videos
        return rated_videos
    
    @staticmethod 
    def visualize(rated_videos:list):
        for video in rated_videos:
            print(f"\n{video['title']} --> pontos : {video['points']}")
            for ocurrence in video["ocurrences"]:
                print("\t",ocurrence)

if __name__ == "__main__":
    #testar se ta tudo ok
    channel = FindVideoByKeywords("https://www.youtube.com/channel/UC-NwgkrLPYmzM-xoLr2GX-Q")
    captions = channel.get_captions()
    channel.set_keywords(["trabalho","vaga","emprego","python"])
    result = channel.analyze()
    channel.visualize(result) # or channel.visualize(channel.last_analizys)